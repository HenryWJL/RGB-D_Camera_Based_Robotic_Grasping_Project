Basic concepts

1.Setup.bash
Intro: Allow users to have access to some ROS commands. 

Sourcing two different setup.bash:
(1)source /opt/ros/melodic(noedic)/setup.bash
Intro: to have access to the ROS commands when opening new shells.(before catkin_make)
(2)source ~/catkin_ws/devel/setup.bash
Intro: to add the workspace to ROS environment after building packages.(after catkin_make)


2.Catkin workspace
Intro: a folder where you modify, build, and install catkin packages.

Content:
(1)Source space
Intro: containing the source code of catkin packages. 
(2)Build space
Intro: where cmake and make are called to build the catkin packages.
(3)Development (Devel) space 
Intro: where built targets are placed before being installed.
(4)Install space
Intro: install the targets.


3.Manifests (package.xml)
Intro: a description of a package. Containing defined dependencies between packages, version, maintainer, license, etc...

4.Catkin packages
Intro: a package that meets the following requirements:
(1)contain a package.xml.
(2)contain a CMakeLists.txt.
(3)no nested packages nor multiple packages sharing the same directory.

5.REP128
Intro: a naming convention.

6.Node
Intro: an executable cpp or python documents.

7.Message
Intro: a simple data type of information transmitted when subscribing or publishing to a topic.

8.Topic
Intro: nodes don’t know who they are communicating with, so a topic is needed for nodes to subscribe or publish to.

9.Master
Intro: enable individual ROS nodes to locate one another. 

10.Rqt_graph
Intro: showing the connection between nodes through topics.

11.Rqt_plot
Intro: displays a scrolling time plot of the data published on topics.

12.Service
Intro: another way for nodes to communicate with each other. Topic is unidirectional while service is bidirectional (nodes can send a request and receive a response).

13.Rqt_console
Intro: often used with rqt_logger_level to publish some information when nodes are running.

14.Rqt_logger_level
Intro: there are five levels to set. The priority is shown below, if you set one, levels prior to it will also be called.

Fatal  Error  Warn  Info  Debug
Highest                     lowest

15.Msg
Intro: msg files are simple text files that describe the fields of a ROS message. They are used to generate source code for messages in different languages.

16.Srv
Intro: srv files describe a ROS service. They’re similar to msg files, except that they are composed of a request and a response, which are separated by a ‘---’ line.




Basic commands

1.printenv | grep ROS
Intro: print environment variables.

2.source filename or . filename
Intro: execute initialization documents.

3.catkin_make
Intro: called at ~/catkin_ws/, used to build any packages located in ~/catkin_ws/src. (with cmake)

Remark: 
Make: just compile what is changed.
Build: completely compile all.

4.sudo apt-get install package_name
Intro: install ROS packages.

5.pwd
Intro: print the path of current directory

6.echo *
Intro: display something on the screen (e.g. environment variables)

7.mkdir (-p) package_name
Intro: create an empty directory.

8.Touch filename
Intro: create a new file.

ROS Commands

Caution: these commands are applied to ROS packages that are within the directories listed in ROS_PACKAGE_PATH.

1.rospack find
Intro: find packages by names.

2.roscd
Intro: change directory.

3.rosls
Intro: list the documents inside a package.

4.catkin_create_pkg package_name dependency1 dependency2 ...
Intro: create a catkin package.

5.roscore
Intro: a command to run before using any ROS nodes.

6.rosnode list
Intro: list the currently running nodes.

7.rosnode ping node_name
Intro: test if the node is successfully connected to computer.

8.rosrun package_name node_name ( __name:=new_node_name)
Intro: use the package name to directly run a node within a package (without having to know the package path).

9.rostopic echo topic_name
Intro: display the data of a topic.

10.rostopic type topic_name
Intro: print the type of the topic.

Remark:
The publisher and subscriber must send and receive the same type of message. This means that a topic type is defined by the message type published on it.

11.rosmsg show typename
Intro: display detailed information of a message.

12.rostopic pub topic_name message_type arguments
Intro: publish data on to a topic.

13.rosservice type service_name
Intro: print the type of the service. 

Empty: takes no arguments (i.e. it sends no data when making a request and receives no data when receiving a response).

14.rosservice call service_name arguments
Intro: run the service.

15.rossrv show typename
Intro: display detailed information of a service. 

16.rosparam
Intro: some commands manipulating on the parameters of nodes. 

rosparam dump filename namespace:
Store the current parameters in a file.

rosparam load filename namespace:
Read the parameters in a file and set the current parameters to those.

17.roslaunch package_name filename.launch
Intro: starts nodes as defined in a launch file.

18.Rosed package_name filename
Intro: directly edit a file within a package by using the package name.

19.roscp package_name filename copy_path
Intro: copy a file inside a package to another package.
